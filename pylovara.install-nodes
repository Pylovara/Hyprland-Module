#!/bin/bash
# pylovara.install-nodes
# Pylovara Full Installer - Installiert Pylovara in /Pylovara/ und aktiviert es in der Shell
# Version: 1.0 (2025-05-13)

set -e

echo " PROTOTYP 1.1 - KANN BUGGY SEIN "
echo "üß¨ Pylovara Installer gestartet"
echo "Rootrechte erforderlich"

# Pr√ºfen, ob Root-Rechte vorhanden sind
if [[ "$EUID" -ne 0 ]]; then
    echo "‚ùå Fehler: Bitte mit sudo ausf√ºhren" >&2
    exit 1
fi

# Zielpfad
INSTALL_DIR="/Pylovara"

# Abh√§ngigkeiten (optional, f√ºr Arch Linux)
DEPENDENCIES=(
    "git: f√ºr Repository-Klonen (optional)"
    "tree: f√ºr 'p' Kommando (main.p-nodes)"
    "lshw: f√ºr 'dna hw' (hw.cmd-dna)"
    "usbutils: f√ºr 'lsusb' (usb.cmd-dna)"
    "pciutils: f√ºr 'lspci' (pci.cmd-dna)"
    "net-tools: f√ºr 'ifconfig' und 'netstat' (internet.cmd-dna, ports.cmd-dna)"
    "wget: f√ºr 'dna load' (load.cmd-dna)"
)

echo "üìã Hinweis: Folgende Pakete werden f√ºr volle Funktionalit√§t empfohlen (Arch Linux):"
for dep in "${DEPENDENCIES[@]}"; do
    pkg=${dep%%:*}
    desc=${dep#*:}
    if ! command -v "$pkg" >/dev/null 2>&1; then
        echo "  - $pkg ($desc) -> Installiere mit 'pacman -S $pkg'"
    else
        echo "  - $pkg ($desc) -> Bereits installiert"
    fi
done
echo "Dr√ºcke Enter, um fortzufahren, oder Strg+C, um abzubrechen"
read -r

# Pr√ºfen, ob INSTALL_DIR bereits existiert
if [[ -d "$INSTALL_DIR" ]]; then
    echo "‚ùå Fehler: Verzeichnis '$INSTALL_DIR' existiert bereits" >&2
    echo "L√∂sche es manuell mit 'rm -rf $INSTALL_DIR' oder w√§hle einen anderen Pfad" >&2
    exit 2
fi

# Installation: Git oder lokales Kopieren
echo "üì• Installiere Pylovara nach $INSTALL_DIR..."
if command -v git >/dev/null 2>&1; then
    git clone https://github.com/Pylovara/Pylovara.git "$INSTALL_DIR" || {
        echo "‚ùå Fehler beim Klonen des Repositories" >&2
        exit 3
    }
elif [[ -d "./Pylovara" ]]; then
    echo "Git nicht verf√ºgbar, kopiere lokal aus ./Pylovara..."
    cp -r ./Pylovara "$INSTALL_DIR" || {
        echo "‚ùå Fehler beim Kopieren der Dateien" >&2
        exit 4
    }
else
    echo "‚ùå Fehler: Weder 'git' verf√ºgbar noch lokales './Pylovara' Verzeichnis gefunden" >&2
    echo "Installiere 'git' oder stelle das Repository lokal bereit" >&2
    exit 5
fi

# Dateityp-spezifische Berechtigungen basierend auf datatypes.conf
echo "üîí Setze Berechtigungen basierend auf datatypes.conf..."
DATATYPES_CONF="$INSTALL_DIR/SystemControl/datatypes.conf"

if [[ ! -f "$DATATYPES_CONF" ]]; then
    echo "‚ö†Ô∏è Warnung: $DATATYPES_CONF nicht gefunden, setze Standardberechtigungen" >&2
    find "$INSTALL_DIR" -type f -exec chmod 644 {} \;
    find "$INSTALL_DIR" -type d -exec chmod 755 {} \;
    find "$INSTALL_DIR" -type f \( -name "*.sh" -o -name "*.nodes" -o -name "*.dna" \) -exec chmod 755 {} \;
else
    # Dateitypen aus datatypes.conf extrahieren
    while IFS=' = ' read -r key value; do
        if [[ "$key" =~ ^\[(.*)\]$ ]]; then
            current_section="${BASH_REMATCH[1]}"
            format=""
            continue
        fi
        if [[ "$key" == "format" && "$current_section" ]]; then
            format="$value"
            case "$format" in
                # Ausf√ºhrbare Dateien (755)
                "*.cmd-dna"|"*.core-dna"|"*.nodes"|"*.maker-nodes"|"*.p-nodes"|"*.pylo-nodes")
                    echo "Setze chmod 755 f√ºr $format"
                    find "$INSTALL_DIR" -type f -name "$format" -exec chmod 755 {} \;
                    ;;
                # Konfigurationsdateien und Notizen (644)
                "*.pv-conf"|"*.conf"|"*.wiki-notes"|"*.license-notes"|"*.notes"|"*.ai-wiki-notes")
                    echo "Setze chmod 644 f√ºr $format"
                    find "$INSTALL_DIR" -type f -name "$format" -exec chmod 644 {} \;
                    ;;
                # Platzhalter und andere (644)
                "placeholder"|"robots.txt")
                    echo "Setze chmod 644 f√ºr $format"
                    find "$INSTALL_DIR" -type f -name "$format" -exec chmod 644 {} \;
                    ;;
                # Wildcard-Formate (z.B. *.*-errors, *.*-logic)
                "*.*-errors"|"*.*-logic"|"*.*-micro-nodes"|"*.*-nano-nodes"|"*.*-needles")
                    echo "Setze chmod 644 f√ºr $format"
                    find "$INSTALL_DIR" -type f -name "$format" -exec chmod 644 {} \;
                    ;;
                *)
                    echo "‚ö†Ô∏è Unbekanntes Format: $format, setze chmod 644" >&2
                    find "$INSTALL_DIR" -type f -name "$format" -exec chmod 644 {} \;
                    ;;
            esac
        fi
    done < "$DATATYPES_CONF"
    # Verzeichnisse auf 755 setzen
    find "$INSTALL_DIR" -type d -exec chmod 755 {} \;
fi

# Shell-Integration
echo "üîó Integriere Pylovara in die Shell..."
read -p "Soll /Pylovara/SystemControl/control.pv-conf automatisch in deine Shell eingebunden werden? (j/n): " -n 1 -r
echo
CONTROL_CONF="$INSTALL_DIR/SystemControl/control.pv-conf"

if [[ $REPLY =~ ^[Jj]$ ]]; then
    SHELL_RC="$HOME/.bashrc"
    [[ "$SHELL" == */zsh ]] && SHELL_RC="$HOME/.zshrc"

    if [[ ! -f "$SHELL_RC" ]]; then
        echo "‚ö†Ô∏è Warnung: $SHELL_RC nicht gefunden, erstelle neue Datei" >&2
        touch "$SHELL_RC"
    fi

    # Pr√ºfen, ob control.pv-conf bereits gesourced wird
    if ! grep -q "source $CONTROL_CONF" "$SHELL_RC"; then
        echo "source $CONTROL_CONF" >> "$SHELL_RC"
        echo "‚úÖ $CONTROL_CONF wurde in $SHELL_RC eingebunden"
        echo "Starte ein neues Terminal oder f√ºhre 'source $SHELL_RC' aus"
    else
        echo "‚ÑπÔ∏è $CONTROL_CONF ist bereits in $SHELL_RC eingebunden"
    fi
else
    echo "‚ÑπÔ∏è Du kannst die Datei manuell sourcen:"
    echo "source $CONTROL_CONF"
fi

# Abschluss
echo "üéâ Installation abgeschlossen!"
echo "Pylovara ist in $INSTALL_DIR installiert und bereit"
echo "Teste das System mit: dna list"
echo "Pylovara befindet sich in der Beta Test Phase"
