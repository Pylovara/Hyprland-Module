##############################################################################################
@wiki_nr: 02 06 ##############################################################################
@wiki_nr: module #############################################################################
##############################################################################################

Logic-Module bilden das Gehirn hinter jedem Pylovara-Vorgang.
Sie enthalten reine Entscheidungslogik, keine Steuerung selbst.
Sie sagen was passieren soll – nicht wie.

Sie arbeiten NICHT als Regler, sondern geben nur die Logik weiter,
die dann durch Nodes (Reglermodule) ausgeführt wird.
Das gilt für Sound, Fenster, Rendering, Netzwerk – alles.

# Die Logik steckt im Logic-Modul.
# Die Steuerung läuft über Nodes.

# Wie funktioniert das?

- Needles erkennen Geräte oder Bedingungen
- Logic-Module interpretieren das Ergebnis
- Nodes (egal ob *.*-nodes, *.*-nano-nodes, *.*-micro-nodes) setzen es um

Beispiel:
Needle:     „Nvidia-GPU erkannt“
Logic:      „Nutze Vulkan statt OpenGL“
Node:       `gpu.render-node` oder `gpu.settings.micro-node` führt es aus

# Aufgaben der *.*-logic-Module:

- Vermittlung zwischen Treiber-Needles und Ausführungs-Nodes
- Definition von „Wenn A, dann B“-Beziehungen
- Austauschbare Logikschalter für Systeme (Audio, GPU, Fenster, etc.)
- Entkoppelte Steuerlogik – mehrere Nodes können dieselbe Logic referenzieren

# Beispiele:
audio.pipewire-logic        → sagt, welche Node bei PipeWire aktiv ist
gpu.vulkan-logic            → sagt, ob Vulkan oder OpenGL aktiviert werden soll
windowmanager.hypr-logic    → legt fest, welche Fenstersteuerung bei Hyprland greift
input.keyboard-logic        → bestimmt das Mapping, setzt es aber nicht selbst

# Typklassifikation

| Typ              | Rolle                                                       | Beispiel                   |
|------------------|-------------------------------------------------------------|----------------------------|
| *.*-needles      | Erkennt Hardware oder Gegebenheiten                         | nvidia.gpu-needles         |
| *.*-logic        | Legt Steuerlogik fest – keine Regelung, nur Weitergabe      | gpu.vulkan-logic           |
| *.*-nodes        | Regler auf Makro-Ebene (zentrale Schalter, Hauptaktionen)   | audio.master-nodes         |
| *.*-nano-nodes   | Teilfunktion eines Reglers (z. B. Pegel, Balance)           | bass.eq-nano-nodes         |
| *.*-micro-nodes  | Mikrosteuerung auf Detailstufe                              | mic.pan.micro-nodes        |
| *.*-notes        | Infodateien, technische Hinweise                            | gpu.opengl-notes           |

🔒 Wichtig:
Logic-Module sind zentrale Komponenten – sie tun nichts direkt.
Sie entscheiden, aber regeln nicht.

„Wer regeln will, soll *.*-nodes benutzen.“
– alter Pylovara-Spruch

# Wir erstellen die Datei nodes.wiki-notes.txt mit dem vom Nutzer beschriebenen Inhalt

nodes_wiki_text = """
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
📁  nodes.wiki-notes – Knotenübersicht
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

Systematische Einordnung und Vererbungslogik der Knoten im Pylovara-System:

╭────────────────────────────────────╮
│  Knoten-Hierarchie                 │
╰────────────────────────────────────╯

1  Mutter-Knoten
    ➤ *.*-nodes
    ➥ Eigenständiger Regel-Knoten.
    ➥ Kann direkt Reglerfunktionen übernehmen.
    ➥ Kann eigenständig auslösen ODER Tochter- & Kinder-Knoten besitzen.
    ➥ Steuert wie ein Master-Regler in einer DAW: Nur das, was er bekommt.

2  Tochter-Knoten
    ➤ *.*-nano-nodes
    ➥ Kann einzelne Aspekte gezielter ansprechen als Mutter-Knoten.
    ➥ Kann Micro-Nodes oder direkt Needles nach sich ziehen.
    ➥ Optional, granularer.

3  Kinder-Knoten
    ➤ *.*-micro-nodes
    ➥ Muss immer an eine *.needles angeschlossen werden.
    ➥ Maximal granulare Weitergabe, aber nicht allein lauffähig.
    ➥ Dient zur Detailregelung, kein Standalone-Regler.

4  Logik-Knoten
    ➤ *.*-logic
    ➥ Beinhaltet ausschließlich die Logik (IF/ELSE, Entscheidungen, Filter).
    ➥ Wird von allen Node-Typen zur Funktionsausführung benötigt.
    ➥ Kein aktiver Regler, reine Entscheidungsinstanz.

5  Treiber-Zecken
    ➤ *.*-needles
    ➥ Abschlussknoten bzw. Ziel der Ansteuerung.
    ➥ Direkter Zugriff auf Treiber, Hardware, Prozesse.
    ➥ Vergleichbar mit Anschlüssen oder Gefäßen: reines "Empfangsorgan".

╭────────────────────────────────────╮
│  Reglerstruktur und Weitergabe     │
╰────────────────────────────────────╯

▸ Jede *.*nodes kann als vollständiger Regler arbeiten oder granular aufspalten.
▸ Nano- und Micro-Nodes dienen der feiner geteilten Weitergabe.
▸ Die Logik kommt immer aus einem *.*logic Modul – keine Regel ohne Logik.
▸ Das Ziel jeder Node-Kette ist eine Needle → sie empfängt und führt aus.

│############################################################################### 
│WikiLexikon : basis-module.wiki-notes
│# WikiSearch /~ Helpme module
│# WikiSearch /~ Helpme 02 06
│# Tree       /~ p Basis-Module/   
│# pylo Basis-Module/- basis-module.wiki-notes cat
│###############################################################################
