#!/bin/bash
# AbsoluterPfad: 
# Pylovara-FileManager-System/Pylo-Module/pylohelp.pylo-nodes
# .pylo-nodes: Kernmodule für pylo-Features
# Pylovara Universal fixer with Debug Logger

LOG_DIR="/Pylovara-FileManager-System/P-Error"
LOG_FILE="$LOG_DIR/pylohelp.log"
mkdir -p "$LOG_DIR"  # Sicherstellen, dass der Log-Ordner existiert

log_message() {
    # Funktion zum Loggen von Nachrichten mit Timestamp
    echo "$(date +'%Y-%m-%d %H:%M:%S') - $1" >> "$LOG_FILE"
}

# Eingabe prüfen
if [[ -z "$1" || ! "$1" =~ /- ]]; then
    log_message "[ ERROR ] Kein gültiger Ordner mit /- angegeben."
    echo "[ ERROR ] Kein gültiger Ordner mit /- angegeben."
    exit 1
fi

# Fixierten Pfad setzen
fixed_path="${1%/-}"  # "/usr/include/-" → "/usr/include"
shift  # Rest der Argumente verschieben

# Pfad validieren
if [ ! -d "$fixed_path" ]; then
    log_message "[ ERROR ] Ordner existiert nicht: $fixed_path"
    echo "[ ERROR ] Ordner existiert nicht: $fixed_path"
    exit 1
fi

# Datei extrahieren
file="$1"
shift

# Fehlerbehandlung, wenn keine Datei angegeben wurde
if [ -z "$file" ]; then
    log_message "[ INFO ] Nur Pfad fixiert: $fixed_path"
    echo "[ INFO ] Nur Pfad fixiert: $fixed_path"
    exit 0
fi

# Datei-Pfad zusammensetzen
full_path="$fixed_path/$file"

# Datei prüfen
if [ ! -f "$full_path" ]; then
    log_message "[ ERROR ] Datei nicht gefunden: $full_path"
    echo "[ ERROR ] Datei nicht gefunden: $full_path"
    exit 1
fi

# Wenn noch Argumente → Befehl ausführen
if [ $# -gt 0 ]; then
    log_message "[ INFO ] Führe aus: $* $full_path"
    echo "[ INFO ] Führe aus: $* $full_path"
    "$@" "$full_path"
else
    log_message "[ INFO ] Datei gefunden: $full_path"
    echo "[ INFO ] Datei gefunden: $full_path"
fi
